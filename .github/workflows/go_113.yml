name: Go1.13
on: [push, pull_request, release]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: authenticator_test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
    - name: Install PostgreSQL client
      run: |
        sudo apt-get -yqq install postgresql-client

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Install sql-migrate tool
      run: |
        go get -u -v github.com/rubenv/sql-migrate/...

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Run migrations
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        cd migrations
        sql-migrate up -env="testing"

    - name: Tests
      run: | 
        go test -race ./models -test.config="../sqlboiler_test.yml"
        go test -race -coverprofile=server.txt -covermode=atomic ./cmd/server
        go test -race -coverprofile=verify.txt -covermode=atomic ./verify

    - name: Codecov
      uses: codecov/codecov-action@v1.0.4
      with:
        # Repository upload token - get it from codecov.io
        token: ${{ secrets.CODECOV_TOKEN }}
        # Path to coverage file to upload
        file: "*.txt"
    
    - name: Trigger Docker Hub build
      if: github.repository == 'moapis/authenticator' && github.event_name == 'push'
      run: |
        curl -X POST ${{ secrets.MIGRATIONS_TRIGGER_URL }} > /dev/null && echo "Triggered migrations build"
        curl -X POST ${{ secrets.SERVER_TRIGGER_URL }} > /dev/null && echo "Triggered server build"
        curl -X POST ${{ secrets.ADMIN_TRIGGER_URL }} > /dev/null && echo "Triggered admin build"