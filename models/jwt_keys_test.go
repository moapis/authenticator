// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testJWTKeys(t *testing.T) {
	t.Parallel()

	query := JWTKeys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testJWTKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJWTKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := JWTKeys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJWTKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := JWTKeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJWTKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := JWTKeyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if JWTKey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JWTKeyExists to return true, but got false.")
	}
}

func testJWTKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	jwtKeyFound, err := FindJWTKey(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if jwtKeyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testJWTKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = JWTKeys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testJWTKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := JWTKeys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJWTKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jwtKeyOne := &JWTKey{}
	jwtKeyTwo := &JWTKey{}
	if err = randomize.Struct(seed, jwtKeyOne, jwtKeyDBTypes, false, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}
	if err = randomize.Struct(seed, jwtKeyTwo, jwtKeyDBTypes, false, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = jwtKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = jwtKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := JWTKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJWTKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	jwtKeyOne := &JWTKey{}
	jwtKeyTwo := &JWTKey{}
	if err = randomize.Struct(seed, jwtKeyOne, jwtKeyDBTypes, false, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}
	if err = randomize.Struct(seed, jwtKeyTwo, jwtKeyDBTypes, false, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = jwtKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = jwtKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func jwtKeyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func jwtKeyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *JWTKey) error {
	*o = JWTKey{}
	return nil
}

func testJWTKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &JWTKey{}
	o := &JWTKey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize JWTKey object: %s", err)
	}

	AddJWTKeyHook(boil.BeforeInsertHook, jwtKeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	jwtKeyBeforeInsertHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.AfterInsertHook, jwtKeyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	jwtKeyAfterInsertHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.AfterSelectHook, jwtKeyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	jwtKeyAfterSelectHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.BeforeUpdateHook, jwtKeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	jwtKeyBeforeUpdateHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.AfterUpdateHook, jwtKeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	jwtKeyAfterUpdateHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.BeforeDeleteHook, jwtKeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	jwtKeyBeforeDeleteHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.AfterDeleteHook, jwtKeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	jwtKeyAfterDeleteHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.BeforeUpsertHook, jwtKeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	jwtKeyBeforeUpsertHooks = []JWTKeyHook{}

	AddJWTKeyHook(boil.AfterUpsertHook, jwtKeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	jwtKeyAfterUpsertHooks = []JWTKeyHook{}
}

func testJWTKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJWTKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(jwtKeyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJWTKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testJWTKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := JWTKeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testJWTKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := JWTKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	jwtKeyDBTypes = map[string]string{`ID`: `integer`, `PublicKey`: `bytea`, `CreatedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testJWTKeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(jwtKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(jwtKeyAllColumns) == len(jwtKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testJWTKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(jwtKeyAllColumns) == len(jwtKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &JWTKey{}
	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, jwtKeyDBTypes, true, jwtKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(jwtKeyAllColumns, jwtKeyPrimaryKeyColumns) {
		fields = jwtKeyAllColumns
	} else {
		fields = strmangle.SetComplement(
			jwtKeyAllColumns,
			jwtKeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := JWTKeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testJWTKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(jwtKeyAllColumns) == len(jwtKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := JWTKey{}
	if err = randomize.Struct(seed, &o, jwtKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert JWTKey: %s", err)
	}

	count, err := JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, jwtKeyDBTypes, false, jwtKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize JWTKey struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert JWTKey: %s", err)
	}

	count, err = JWTKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
