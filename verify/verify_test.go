// Copyright (c) 2019, Mohlmann Solutions SRL. All rights reserved.
// Use of this source code is governed by a License that can be found in the LICENSE file.
// SPDX-License-Identifier: BSD-3-Clause

/*
Package verify provides middleware for GRPc servers which need
to verify JSON Web Tokens generated by this Authenticator service.
*/
package verify

import (
	"encoding/base64"
	"errors"
	"testing"
)

func TestParseJWTHeader(t *testing.T) {
	tests := []struct {
		name    string
		token   string
		want    int
		wantErr bool
	}{
		{
			"base64 error",
			"2",
			0,
			true,
		},
		{
			"Unmarshal error",
			"",
			0,
			true,
		},
		{
			"algoritm error",
			base64.RawURLEncoding.EncodeToString([]byte("{\"Alg\": \"foo\"}")),
			0,
			true,
		},
		{
			"ParseInt error",
			base64.RawURLEncoding.EncodeToString([]byte("{\"Alg\": \"EdDSA\", \"Kid\": \"x\"}")),
			0,
			true,
		},
		{
			"Valid header",
			base64.RawURLEncoding.EncodeToString([]byte("{\"Alg\": \"EdDSA\", \"Kid\": \"10\"}")),
			10,
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := ParseJWTHeader(tt.token)
			if (err != nil) != tt.wantErr {
				t.Errorf("ParseJWTHeader() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			var e *VerificationErr
			if tt.wantErr && !errors.As(err, &e) {
				t.Errorf("ParseJWTHeader() error = %T, wantErr %T", err, e)
			}
			if got != tt.want {
				t.Errorf("ParseJWTHeader() = %v, want %v", got, tt.want)
			}
		})
	}
}
